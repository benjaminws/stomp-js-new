var StompSocket = require('./stomp_socket').StompSocket;
var Frame = require('./frame').Frame;

function Stomp(args) {
  this.port = args.port || 61613;
  this.host = args.host || "127.0.0.1";
  this.debug = args.debug || false;
  this.login = args.login;
  this.passcode = args.passcode;
  this.ssl = args.ssl || false;
  this.ssl_validate = args.ssl_validate || false;
  this.ssl_options = args.ssl_options || {};
  this['client-id'] = args['client-id'];
  var socket_args = {
    port: this.port,
    host: this.host,
    ssl: this.ssl,
    ssl_validate: this.ssl_validate,
    ssl_options: this.ssl_options
  };
  this.stompSocket = new StompSocket(socket_args);
  this._setupSocketListeners();
  this.session = null;
  this.frame_builder = new Frame();
};

Stomp.prototype = new process.EventEmitter();

Stomp.prototype.connect = function() {
  this.stompSocket.connect();
}

Stomp.prototype.disconnect = function() {
  this.stompSocket.disconnect();
}

Stomp.prototype.stomp_connect = function(headers) {
  this.send_command('CONNECT');
}

Stomp.prototype.send_frame = function(frame) {
  this.stompSocket.write(frame.as_string());
}

Stomp.prototype.send_command = function(command, headers, body, want_receipt) {
    var want_receipt = want_receipt || false,
        headers = headers || {},
        body = body || null;

    var args = {
        'command': command,
        'headers': headers,
        'body': body
    };

    var frame_to_send = this.frame_builder.build_frame(args, want_receipt);
    this.send_frame(frame_to_send);

    return frame_to_send;
};

Stomp.prototype._setupSocketListeners = function() {
  var self = this;
  this.stompSocket.on('socket_connected', function() {
    self.stomp_connect();
  });
  this.stompSocket.on('socket_disconnected', function() {
    console.log('disconnected');
  });
  this.stompSocket.on('socket_error', function(error) {
    console.log('err' + error);
  });
  this.stompSocket.on('frame_ready', function(frame) {
    self.handle_frame(frame);
  });
}

Stomp.prototype.handle_frame = function(frame) {
  var self = this;

  switch (frame.command) {
    case 'CONNECTED':
      self.session = frame.headers['session'];
      self.emit('connected');
      break;
    case 'MESSAGE':
      if ('message-id' in frame.headers) {
        self.emit('message', frame);
      }
      break;
    case "RECEIPT":
      self.emit('receipt', frame.headers['receipt-id']);
      break;
    case "ERROR":
      self.emit('error', frame);
      break;
    default:
      console.log('Could not parse command: ' + frame.command);
  }
}

/**
 * Subscribe to destination (queue or topic)
 * @param {Object} headers
 */
Stomp.prototype.subscribe = function(headers) {
  headers['session'] = this.session;
  this.send_command('SUBSCRIBE', headers);
};

/**
 * Unsubscribe from destination (queue or topic)
 * @param {Object} headers
 */
Stomp.prototype.unsubscribe = function(headers) {
  headers['session'] = this.session;
  this.send_command('UNSUBSCRIBE', headers);
};

/**
 * Acknowledge received message
 * @param {String} message id to acknowledge
 */
Stomp.prototype.ack = function(message_id) {
  this.send_command('ACK', {'message-id': message_id});
};

/**
 * Begin transaction
 * @return {String} generated transaction id
 */
Stomp.prototype.begin = function() {
  var transaction_id = Math.floor(Math.random()*99999999999).toString();
  this.send_command('BEGIN', {'transaction': transaction_id});
  return transaction_id;
};

/**
 * Commit transaction
 * @param {String} transaction id generated by Stomp.begin()
 */
Stomp.prototype.commit = function(transaction_id) {
  this.send_command('COMMIT', {'transaction': transaction_id});
};

/**
 * Abort transaction
 * @param {String} transaction id generated by stomp.Stomp.begin()
 */
Stomp.prototype.abort = function(transaction_id) {
  this.send_command('ABORT', {'transaction': transaction_id});
};

/**
 * Send MESSAGE to STOMP broker
 * @param {Object} headers required (destination is required)
 * @param {Bool} do you want a receipt of the message sent?
 * @return {Object} Frame object of message sent
 */
Stomp.prototype.send = function(body, headers, want_receipt) {
  var want_receipt = want_receipt || false;
  destination = headers['destination'];
  headers['session'] = this.session;
  return this.send_command('SEND', headers, body, want_receipt)
};

module.exports.Stomp = Stomp;
